{
	"info": {
		"_postman_id": "1a10b528-91b7-484b-84f1-73af37c4d1f8",
		"name": "PetStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12847021"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "createUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData =  JSON.parse(pm.request.body.raw)\r",
									"\r",
									"pm.environment.set(\"newUser\", pm.request.body.raw)\r",
									"pm.environment.set(\"userName\", jsonData.username)\r",
									"pm.environment.set(\"password\", jsonData.password)\r",
									"\r",
									"pm.test(`Status code is 200 for create user \"${jsonData.username}\"`, function () {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(`Verify if ${jsonData.username} was created`, function(){\r",
									"    pm.sendRequest({\r",
									"        url: `${pm.environment.get(\"baseUrl\")}/user/${jsonData.username}`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'content-type': 'application/json',\r",
									"            'Accept': \"*/*\"\r",
									"        }\r",
									"    },\r",
									"    function (err, response){\r",
									"        pm.expect(response).to.have.status(200)\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user/${jsonData.username}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    }\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"username\": \"WaPestStore\",\r\n  \"firstName\": \"Woody\",\r\n  \"lastName\": \"Harington\",\r\n  \"email\": \"woody@mail.com\",\r\n  \"password\": \"12345\",\r\n  \"phone\": \"\",\r\n  \"userStatus\": 0\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    },\r",
									"    body: pm.environment.get(\"newUser\")\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(pm.response.text())\r",
									"\r",
									"pm.test(`Status code is 200 for get user by username: \"${pm.environment.get(\"userName\")}\"`, function (){\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(`In response, the username expected is ${pm.environment.get(\"userName\")}`, function(){\r",
									"    const userCreted =  JSON.parse(pm.environment.get(\"newUser\"))\r",
									"\r",
									"    for(key of Object.keys(jsonData)){\r",
									"\r",
									"        pm.expect(\r",
									"            userCreted[key],\r",
									"            `Expected ${userCreted[key]} but, we received ${jsonData[key]} in response`\r",
									"        ).to.equal(jsonData[key])\r",
									"    }\r",
									"})\r",
									"\r",
									"const getUserResponseJsonSchema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"phone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userStatus\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"username\",\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"email\",\r",
									"    \"password\",\r",
									"    \"phone\",\r",
									"    \"userStatus\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(tv4.validate(jsonData, getUserResponseJsonSchema)).to.be.true\r",
									"})\r",
									"\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user/${pm.environment.get(\"userName\")}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    }\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    },\r",
									"    body: pm.environment.get(\"newUser\")\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Status code is 200 for login with valid credentials of user: \"${pm.environment.get(\"userName\")}\"`, function (){\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user/${pm.environment.get(\"userName\")}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    }\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/login?username={{userName}}&password={{password}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{userName}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    },\r",
									"    body: pm.environment.get(\"newUser\")\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})\r",
									"\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user/login?username=${pm.environment.get(\"userName\")}&password=${pm.environment.get(\"password\")}`,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    }\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Status code is 200 to logout with user: \"${pm.environment.get(\"userName\")}\"`, function (){\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user/${pm.environment.get(\"userName\")}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    }\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "AlterUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Validate if fields of user \"${pm.environment.get(\"userName\")}\" was updated`, function(){\r",
									"    \r",
									"    pm.sendRequest({\r",
									"        url: `${pm.environment.get(\"baseUrl\")}/user/${pm.environment.get(\"userName\")}`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'content-type': 'application/json',\r",
									"            'Accept': \"*/*\"\r",
									"        }\r",
									"    }, \r",
									"    function (err, response) {\r",
									"        const userUpdated = response.json()\r",
									"        const jsonData = JSON.parse(pm.request.body.raw)\r",
									"\r",
									"        for(key of Object.keys(jsonData)){\r",
									"\r",
									"            pm.expect(\r",
									"                userUpdated[key],\r",
									"                `Expected ${userUpdated[key]} but, we received ${jsonData[key]} in response`\r",
									"            ).to.equal(jsonData[key])\r",
									"        }\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user/${pm.environment.get(\"userName\")}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    }\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"updateLastName\", \"Prata\")\r",
									"pm.environment.set(\"updatePhone\", \"31999996655\")\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    },\r",
									"    body: pm.environment.get(\"newUser\")\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"username\": \"WaPestStore\",\r\n  \"firstName\": \"Woody\",\r\n  \"lastName\": \"{{updateLastName}}\",\r\n  \"email\": \"woody@mail.com\",\r\n  \"password\": \"12345\",\r\n  \"phone\": \"{{updatePhone}}\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(`Verify if ${pm.environment.get(\"userName\")} was deleted`, function () {\r",
									"    pm.sendRequest({\r",
									"        url: `${pm.environment.get(\"baseUrl\")}/user/${pm.environment.get(\"userName\")}`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'content-type': 'application/json',\r",
									"            'Accept': \"*/*\"\r",
									"        }\r",
									"    }, \r",
									"    function (err, response) {\r",
									"    pm.expect(\r",
									"        response.code,\r",
									"        `Expected ${404}, but we received ${response.code}`\r",
									"        ).to.be.equal(404)\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"baseUrl\")}/user`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'Accept': \"*/*\"\r",
									"    },\r",
									"    body: pm.environment.get(\"newUser\")\r",
									"},\r",
									"function (err, response){\r",
									"    pm.expect(response).to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{userName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUserByList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData =  JSON.parse(pm.request.body.raw)\r",
									"\r",
									"for( index in jsonData){\r",
									"\r",
									"    pm.test(`Verify if ${jsonData[index].username} was created`, function(){\r",
									"        pm.sendRequest({\r",
									"            url: `${pm.environment.get(\"baseUrl\")}/user/${jsonData[index].username}`,\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'content-type': 'application/json',\r",
									"                'Accept': \"*/*\"\r",
									"            }\r",
									"        },\r",
									"        function (err, response){\r",
									"            pm.expect(response).to.have.status(200)\r",
									"        })\r",
									"    })\r",
									"}\r",
									"\r",
									"pm.test(`Status code is 200 for create users by list`, function () {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"\r",
									"const usersInserted = JSON.parse(pm.request.body.raw)\r",
									"for(user in usersInserted){\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: `${pm.environment.get(\"baseUrl\")}/user/${usersInserted[user][\"username\"]}`,\r",
									"        method: 'DELETE',\r",
									"        header: {\r",
									"            'content-type': 'application/json',\r",
									"            'Accept': \"*/*\"\r",
									"        }\r",
									"    },\r",
									"    function (err, response){\r",
									"        pm.expect(response).to.have.status(200)\r",
									"    })\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n      \"id\": 2,\r\n      \"username\": \"user2\",\r\n      \"firstName\": \"firstNameUser2\",\r\n      \"lastName\": \"lastNameUser2\",\r\n      \"email\": \"user2@mail.com\",\r\n      \"password\": \"12345\",\r\n      \"phone\": \"\",\r\n      \"userStatus\": 0\r\n    },\r\n    {\r\n      \"id\": 3,\r\n      \"username\": \"user3\",\r\n      \"firstName\": \"firstNameUser3\",\r\n      \"lastName\": \"lastNameUser3\",\r\n      \"email\": \"user3@mail.com\",\r\n      \"password\": \"12345\",\r\n      \"phone\": \"\",\r\n      \"userStatus\": 0\r\n    }\r\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "UserName",
			"value": ""
		}
	]
}